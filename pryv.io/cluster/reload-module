#!/bin/bash

set -e # TODO Enable when stop-pryv won't rise an error anymore
LAST_RELOAD_TMP_FILE="/tmp/pryvioLastReload.tmp";
LAST_CHANGE_TMP_FILE="/tmp/pryvioLastChange.tmp";

checkArgs () {
    if [ "$1" = "--no-hup" ]; then
        NOHUP="$1";
        shift;
    fi
    FULL_PATH="$@";
}

checkWorkingFolder () {
    if ! test -f "./run-pryv" || ! test -f "./stop-pryv"; then
        echo >&2 "Please cd into the pryv root directory before running this script.";
        exit 1;
    fi
}

createLastChangeFile () {
    stat "$FULL_PATH" -c %Y > $LAST_CHANGE_TMP_FILE;
}

createLastReloadFile () {
    date +%s > $LAST_RELOAD_TMP_FILE;
}

testLastReloadTime () {
    # Not yet reloaded, we can reload pryv
    if ! test -f "$LAST_RELOAD_TMP_FILE"; then
        return;
    fi

    lastReload=`cat $LAST_RELOAD_TMP_FILE`
    lastChange=`cat $LAST_CHANGE_TMP_FILE`

    # Pryvio has already been reloaded since last change
    if (( lastReload > lastChange )); then
        echo "Already reloaded, abort";
        exit 0;
    fi
}

reloadPryv () {
    echo;
    echo "Stopping Pryv, please wait...";
    ./stop-pryv || true; # stop-pryv can rise an error (non-zero return value) if some other containers are still running and using same network. With the "|| true" hack we ensure the script doesn't stop due to the "set -e"

    echo;
    echo "Starting Pryv, please wait...";
    ./run-pryv || true; # same comment as above

    echo;
    echo "Pryv reloaded";
}

reloadCore () {
    reloadPryv $1; # TODO only reload core
}

reloadRegister () {
    reloadPryv $1; # TODO only reload register
}

NOHUP="";
checkArgs $*;
checkWorkingFolder;

MODULE_NAME=`echo $FULL_PATH | sed 's/.*pryv\///g' | sed 's/\/.*//g'`;
echo "$MODULE_NAME config changed";
createLastChangeFile;
testLastReloadTime;

case $MODULE_NAME in
    core)
        reloadCore $NOHUP;
        ;;
    register)
        reloadRegister $NOHUP;
        ;;
    # TODO add cases for other modules
    *)
        reloadPryv $NOHUP;
        ;;
esac

createLastReloadFile;
